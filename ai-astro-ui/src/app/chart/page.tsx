'use client'

import { useSearchParams } from 'next/navigation'
import { useEffect, useState } from 'react'
import AstroSvgMap from '@/components/AstroSvgMap'

type PlanetData = {
  "–ü–ª–∞–Ω–µ—Ç–∞": string
  "–ó–Ω–∞–∫": string
  "–î–æ–º": number
  "–ù–∞–∫—à–∞—Ç—Ä–∞": string
  "–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å": string
  "–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–∞–∫—à–∞—Ç—Ä—ã": string
  "–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–º–∞–º–∏": string
  SignLonDMS: string
  isRetroGrade?: boolean | null
}

export default function ChartPage() {
  const searchParams = useSearchParams()
  const [data, setData] = useState<PlanetData[] | null>(null)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const date = searchParams.get('date')
    const time = searchParams.get('time')
    const lat = searchParams.get('lat')
    const lon = searchParams.get('lon')

    if (!date || !time || !lat || !lon) {
      setError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞—Ä—Ç—ã.")
      return
    }

    const fetchData = async () => {
      try {
        const res = await fetch("https://ai-astrology-api.onrender.com/calculate", {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ date, time, lat: parseFloat(lat), lon: parseFloat(lon) })
        })

        if (!res.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        }

        const result = await res.json()
        console.log("üåü API response:", result)

        setData(result.rasi_chart)
      } catch (err) {
        console.error(err)
        setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
      }
    }

    fetchData()
  }, [searchParams])

  if (error) {
    return <p className="text-center mt-10 text-red-500">{error}</p>
  }

  if (!data) {
    return <p className="text-center mt-10">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
  }

  return (
    <div className="max-w-6xl mx-auto mt-10">
      <h1 className="text-2xl font-bold mb-6 text-center">–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</h1>

      {/* SVG –∫–∞—Ä—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–æ–π –ø–ª–∞–Ω–µ—Ç */}
      <AstroSvgMap planets={data} />

      <h2 className="text-xl font-semibold text-center mt-10 mb-4">–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö (D1)</h2>

      <table className="w-full border text-sm">
        <thead className="bg-gray-100">
          <tr>
            <th className="p-2 border">–ü–ª–∞–Ω–µ—Ç–∞</th>
            <th className="p-2 border">–ó–Ω–∞–∫</th>
            <th className="p-2 border">–ì—Ä–∞–¥—É—Å</th>
            <th className="p-2 border">–î–æ–º</th>
            <th className="p-2 border">–ù–∞–∫—à–∞—Ç—Ä–∞</th>
            <th className="p-2 border">–£–ø—Ä. –∑–Ω–∞–∫–∞</th>
            <th className="p-2 border">–£–ø—Ä. –Ω–∞–∫—à–∞—Ç—Ä—ã</th>
            <th className="p-2 border">–£–ø—Ä. –¥–æ–º–æ–≤</th>
            <th className="p-2 border">Rx</th>
          </tr>
        </thead>
        <tbody>
          {data.map((planet, i) => (
            <tr key={i}>
              <td className="p-2 border">{planet["–ü–ª–∞–Ω–µ—Ç–∞"]}</td>
              <td className="p-2 border">{planet["–ó–Ω–∞–∫"]}</td>
              <td className="p-2 border">{planet.SignLonDMS}</td>
              <td className="p-2 border">{planet["–î–æ–º"]}</td>
              <td className="p-2 border">{planet["–ù–∞–∫—à–∞—Ç—Ä–∞"]}</td>
              <td className="p-2 border">{planet["–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å"]}</td>
              <td className="p-2 border">{planet["–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–∞–∫—à–∞—Ç—Ä—ã"]}</td>
              <td className="p-2 border">{planet["–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–º–∞–º–∏"]}</td>
              <td className="p-2 border text-center">{planet.isRetroGrade ? 'R' : ''}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}
